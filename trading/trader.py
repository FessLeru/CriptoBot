"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.
"""
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Any, Union

from bot_logging import logger
from trading.exchange import BitgetExchange
from config import POSITION_SIZE_PERCENT


class Trader:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏."""

    def __init__(self, exchange: BitgetExchange):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.
        
        Args:
            exchange: –û–±—ä–µ–∫—Ç –±–∏—Ä–∂–∏ Bitget
        """
        self.exchange = exchange
        self.leverage = 20
        self.position_size_percent = POSITION_SIZE_PERCENT
        self.active_trades = {}
        self._lock = asyncio.Lock()

        logger.info(
            f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–π–¥–µ—Ä —Å –ø–ª–µ—á–æ–º {self.leverage} –∏ —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏ {self.position_size_percent}%")

    async def set_leverage(self, leverage: int) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞ –¥–ª—è –≤—Å–µ—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–¥–µ–ª–æ–∫.
        
        Args:
            leverage: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞ (1-100)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        if leverage < 1 or leverage > 100:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞: {leverage}. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
            return False

        self.leverage = leverage
        logger.info(f"–ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {leverage}")
        return True

    async def open_trade(self, signal: Dict) -> str:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞.
        
        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–≥–Ω–∞–ª–µ
                {
                    "symbol": "BTC/USDT",
                    "side": "buy" | "sell",
                    "tradeSide": "open",
                    "type": "market",
                    "amount": float,
                    "stop_loss": float,
                    "trail_points": float,
                    "trail_offset": float,
                    "trail_mode": bool,
                    "strategy_name": str,
                    "timeframe": str
                }
                
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
        async with self._lock:
            symbol = signal["symbol"]
            side = signal["side"]  # "buy" –∏–ª–∏ "sell"
            tradeSide = signal["tradeSide"]
            type = signal["type"]
            amount = signal.get("amount", 0)  # –ü–æ–ª—É—á–∞–µ–º amount –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            stop_loss = signal["stop_loss"]
            trail_points = signal.get("trail_points", 0)
            trail_offset = signal.get("trail_offset", 0)
            trail_mode = signal.get("trail_mode", True)
            strategy_name = signal.get("strategy_name", "Unknown")
            timeframe = signal.get("timeframe", "Unknown")

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {symbol} {side.upper()} –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name} ({timeframe})")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞: SL={stop_loss}, trail_points={trail_points}, trail_offset={trail_offset}")

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
                if symbol in self.active_trades:
                    logger.warning(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥ –ø–æ {symbol}")
                    return f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥ –ø–æ {symbol}"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–∞
                if not symbol or not side or not tradeSide:
                    error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞: symbol={symbol}, side={side}, tradeSide={tradeSide}"
                    logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}"

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
                try:
                    await self.exchange.set_leverage(self.leverage, symbol)
                except Exception as e:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ {self.leverage} –¥–ª—è {symbol}: {str(e)}"
                    logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}"

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–æ–≤
                usdt_balance = await self.exchange.get_usdt_balance()
                logger.info(f"üìà –ë–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–æ–≤ USDT: {usdt_balance:.2f}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
                if usdt_balance < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                    error_msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö ({usdt_balance:.2f} USDT)"
                    logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}"

                # –ï—Å–ª–∏ amount –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å–∏–≥–Ω–∞–ª–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
                if amount == 0:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞
                        ticker_data = await self.exchange.get_ticker_price(symbol)
                        current_price = ticker_data['mark']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º mark price
                        
                        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –æ—Ä–¥–µ—Ä–∞ (% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞)
                        amount = ((usdt_balance * self.leverage / 100) * self.position_size_percent) / current_price
                        amount = round(amount, 6)
                        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞: {amount} {symbol.split('/')[0]} ({(usdt_balance * self.leverage / 100) * self.position_size_percent} USDT)")
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—ä–µ–º–∞ –æ—Ä–¥–µ—Ä–∞: {str(e)}"
                        logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –æ—Ä–¥–µ—Ä–∞
                if amount <= 0:
                    error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞: {amount}"
                    logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}"

                # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
                logger.info(
                    f"üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –§–¨–Æ–ß–ï–†–°–ê–•: {symbol}, {side.upper()}, "
                    f"–æ–±—ä–µ–º: {amount:.6f}"
                )

                # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ (–µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω)
                trail_activation = None
                trail_callback = None

                ticker_data = await self.exchange.get_ticker_price(symbol)
                current_price = ticker_data['mark']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º mark price
                
                if trail_mode:
                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (long/short)
                    is_long = side == "buy"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ (—ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                    trail_trigger_points = trail_points  # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    trail_step_points = trail_offset     # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞
                    
                    # –î–ª—è Long: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π, –¥–ª—è Short: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π
                    if is_long:
                        trail_activation = current_price + trail_trigger_points
                    else:
                        trail_activation = current_price - trail_trigger_points
                    
                    # –®–∞–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    trail_callback = trail_step_points
                    
                    logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ {trail_activation:.2f}, "
                               f"—à–∞–≥ –æ—Ç—Å—Ç—É–ø–∞: {trail_callback:.6f} USDT")

                # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                try:
                    order = await self.exchange.create_market_order(
                        symbol=symbol,
                        side=side,
                        amount=amount,
                        stop_loss=stop_loss,
                        trail_activation=trail_activation,
                        trail_callback=trail_callback
                    )
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {str(e)}"
                    logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è {symbol}: –°—Ç–æ—Ä–æ–Ω–∞: {side}, –û–±—ä–µ–º: {amount}, SL: {stop_loss}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ API Bitget
                    if "insufficient balance" in str(e).lower():
                        logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
                    elif "minimum" in str(e).lower():
                        logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: –û–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–ª—è {symbol}")
                    elif "maximum" in str(e).lower():
                        logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: –û–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–ª—è {symbol}")
                    elif "precision" in str(e).lower():
                        logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—ä–µ–º–∞ –∏–ª–∏ —Ü–µ–Ω—ã")
                    elif "rate limit" in str(e).lower():
                        logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API")
                    elif "market closed" in str(e).lower() or "trading not open" in str(e).lower():
                        logger.error(f"–ü—Ä–∏—á–∏–Ω–∞: –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {symbol}")
                        
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {str(e)}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                if not order or 'id' not in order:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞, –æ—Ç–≤–µ—Ç API: {order}"
                    logger.error(f"–°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_msg}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–µ
                self.active_trades[symbol] = {
                    'order_id': order['id'],
                    'side': side,
                    'amount': amount,
                    'stop_loss': stop_loss,
                    'trail_activation': trail_activation,
                    'trail_callback': trail_callback,
                    'trail_mode': trail_mode,
                    'start_time': datetime.now(),
                    'strategy_name': strategy_name,
                    'timeframe': timeframe
                }

                trail_msg = f" —Å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º (–∞–∫—Ç–∏–≤–∞—Ü–∏—è: {trail_activation:.2f}, –æ—Ç—Å—Ç—É–ø: {trail_callback:.6f} USDT)" if trail_mode else ""
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ {side.upper()} {symbol} –Ω–∞ {amount:.4f}{trail_msg}")
                return f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ {side.upper()} {symbol} –Ω–∞ {amount:.4f}{trail_msg}"

            except Exception as e:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ {symbol}: {str(e)}"
                logger.error(error_msg)
                logger.exception(e)  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫—Ç—Ä–µ–π—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–π–¥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if symbol in self.active_trades:
                    del self.active_trades[symbol]
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ {symbol}: {str(e)}"

    async def close_trade(self, symbol: str) -> str:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É.
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
        async with self._lock:
            if symbol not in self.active_trades:
                return f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ {symbol}"

            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                positions = await self.exchange.fetch_positions(symbol)

                closed = False
                for position in positions:
                    if position['symbol'] == symbol and float(position['contracts']) > 0:
                        await self.exchange.close_position(position)
                        closed = True

                if closed:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                    trade_info = self.active_trades.pop(symbol)
                    return f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞"
                else:
                    return f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ {symbol}"

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ {symbol}: {str(e)}")
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ {symbol}: {str(e)}"

    async def close_all_trades(self) -> Dict:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏.
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ {closed_orders: int, closed_positions: int}
        """
        async with self._lock:
            try:
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
                canceled_orders = await self.exchange.cancel_all_orders()

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                closed_positions = await self.exchange.close_all_positions()

                # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                self.active_trades.clear()

                return {
                    "closed_orders": canceled_orders,
                    "closed_positions": closed_positions
                }

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫: {str(e)}")
                return {
                    "closed_orders": 0,
                    "closed_positions": 0,
                    "error": str(e)
                }

    def get_active_trades(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
        """
        return self.active_trades

    async def get_active_positions(self) -> List:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.
        
        Returns:
            List: –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        """
        try:
            return await self.exchange.fetch_positions()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
            return []

    async def get_open_orders(self) -> List:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
        
        Returns:
            List: –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        try:
            return await self.exchange.fetch_open_orders()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
            return []
