#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ ETH –∏ BTC –Ω–∞ –±–∏—Ä–∂–µ Bitget
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤
2. –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤
"""
import dotenv
dotenv.load_dotenv()
import winloop
winloop.install()
import asyncio
import ccxt.async_support as ccxt
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
import json

class BitgetFuturesTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ Bitget"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ Bitget"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        self.api_key = os.getenv('API_KEY')
        self.secret_key = os.getenv('SECRET_KEY') 
        self.passphrase = os.getenv('PASSPHRASE')
        
        if not self.api_key or not self.secret_key or not self.passphrase:
            raise ValueError("API –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É)
        self.exchange = ccxt.bitget({
            'apiKey': self.api_key,
            'secret': self.secret_key,
            'password': self.passphrase,
            'options': {
                'defaultType': 'swap',  # –§—å—é—á–µ—Ä—Å—ã Bitget
                'defaultMarginMode': 'isolated',  # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞
                'defaultContractType': 'perpetual'  # –ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            },
            'enableRateLimit': True
        })
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        self.test_symbols = ['BTC/USDT', 'ETH/USDT']
        
        print(f"‚úÖ –ë–∏—Ä–∂–∞ Bitget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
    def _format_symbol(self, symbol: str) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç Bitget API –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤.
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTC/USDT' –∏–ª–∏ 'BTC/USDT:USDT'
            
        Returns:
            str: –°–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTCUSDT'
        """
        if '/' in symbol:
            # –£–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å ':USDT' –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if ':' in symbol:
                symbol = symbol.split(':')[0]
                
            base, quote = symbol.split('/')
            return f"{base}{quote}"
        return symbol
    
    async def check_positions_and_orders(self, symbol: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É
        
        Args:
            symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö –∏ –æ—Ä–¥–µ—Ä–∞—Ö
        """
        try:
            print(f"\n{'='*60}")
            print(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô –ò –û–†–î–ï–†–û–í –î–õ–Ø {symbol}")
            print(f"{'='*60}")
            
            result = {
                'symbol': symbol,
                'timestamp': datetime.now().isoformat(),
                'positions': [],
                'orders': [],
                'trailing_stops': []
            }
            
            formatted_symbol = self._format_symbol(symbol)
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            try:
                positions_params = {
                    'instType': 'swap',
                    'marginCoin': 'USDT',
                    'symbol': formatted_symbol
                }
                positions = await self.exchange.fetch_positions(params=positions_params)
                
                for position in positions:
                    if position['contracts'] and float(position['contracts']) != 0:
                        pos_info = {
                            'symbol': position['symbol'],
                            'side': position['side'],
                            'size': position['contracts'],
                            'entry_price': position['entryPrice'],
                            'mark_price': position['markPrice'],
                            'unrealized_pnl': position['unrealizedPnl'],
                            'percentage': position['percentage']
                        }
                        result['positions'].append(pos_info)
                        
                        print(f"  üìà –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è:")
                        print(f"     –°–∏–º–≤–æ–ª: {pos_info['symbol']}")
                        print(f"     –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos_info['side']}")
                        print(f"     –†–∞–∑–º–µ—Ä: {pos_info['size']}")
                        print(f"     –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos_info['entry_price']}")
                        print(f"     –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pos_info['mark_price']}")
                        print(f"     –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è PnL: {pos_info['unrealized_pnl']}")
                        print(f"     –ü—Ä–æ—Ü–µ–Ω—Ç: {pos_info['percentage']}%")
                
                if not result['positions']:
                    print("  ‚ùå –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as pos_error:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {pos_error}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
            try:
                orders_params = {
                    'instType': 'swap',
                    'marginCoin': 'USDT'
                }
                orders = await self.exchange.fetch_open_orders(symbol=formatted_symbol, params=orders_params)
                
                for order in orders:
                    order_info = {
                        'id': order['id'],
                        'symbol': order['symbol'],
                        'type': order['type'],
                        'side': order['side'],
                        'amount': order['amount'],
                        'price': order['price'],
                        'status': order['status'],
                        'timestamp': order['timestamp'],
                        'info': order.get('info', {})
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º
                    is_trailing = self._is_trailing_stop(order)
                    
                    if is_trailing:
                        result['trailing_stops'].append(order_info)
                        print(f"  üéØ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ—Ä–¥–µ—Ä:")
                        print(f"     ID: {order_info['id']}")
                        print(f"     –¢–∏–ø: {order_info['type']}")
                        print(f"     –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order_info['side']}")
                        print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_info['amount']}")
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–µ
                        if order_info.get('info'):
                            info = order_info['info']
                            trigger_price = info.get('triggerPrice', 'N/A')
                            callback_rate = info.get('callbackRatio', 'N/A')
                            trailing_percent = info.get('trailingPercent', 'N/A')
                            trailing_trigger = info.get('trailingTriggerPrice', 'N/A')
                            ord_type = info.get('ordType', 'N/A')
                            plan_type = info.get('planType', 'N/A')
                            
                            print(f"     –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {trigger_price}")
                            print(f"     –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞—Ç–∞: {callback_rate}")
                            print(f"     –¢—Ä–µ–π–ª–∏–Ω–≥ –ø—Ä–æ—Ü–µ–Ω—Ç: {trailing_percent}")
                            print(f"     –¢—Ä–µ–π–ª–∏–Ω–≥ —Ç—Ä–∏–≥–≥–µ—Ä: {trailing_trigger}")
                            print(f"     –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (ordType): {ord_type}")
                            print(f"     –¢–∏–ø –ø–ª–∞–Ω–∞ (planType): {plan_type}")
                    else:
                        result['orders'].append(order_info)
                        print(f"  üìÑ –û–±—ã—á–Ω—ã–π –æ—Ä–¥–µ—Ä:")
                        print(f"     ID: {order_info['id']}")
                        print(f"     –¢–∏–ø: {order_info['type']}")
                        print(f"     –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order_info['side']}")
                        print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_info['amount']}")
                        print(f"     –¶–µ–Ω–∞: {order_info['price']}")
                        
                        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if order_info.get('info'):
                            info = order_info['info']
                            ord_type = info.get('ordType', 'N/A')
                            plan_type = info.get('planType', 'N/A')
                            if ord_type != 'N/A' or plan_type != 'N/A':
                                print(f"     [DEBUG] ordType: {ord_type}, planType: {plan_type}")
                
                if not orders:
                    print("  ‚ùå –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as order_error:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä–¥–µ—Ä–æ–≤: {order_error}")
            
            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(result['positions'])}")
            print(f"   ‚Ä¢ –û–±—ã—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(result['orders'])}")
            print(f"   ‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤: {len(result['trailing_stops'])}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return {'error': str(e), 'symbol': symbol}
    
    def _is_trailing_stop(self, order: Dict) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä–¥–µ—Ä —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        
        Args:
            order (Dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
        """
        order_info = order.get('info', {})
        order_type = order.get('type', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –≤ Bitget API
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        trailing_indicators = [
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
            'trailing' in str(order_type).lower(),
            'trailing' in str(order_info.get('ordType', '')).lower(),
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            'trailingPercent' in order_info,
            'callbackRatio' in order_info,
            order_info.get('trailingTriggerPrice') is not None,
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ Bitget
            order.get('type') == 'trailing_stop',
            order_info.get('orderType') == 'trailing_stop',
            order_info.get('planType') == 'trailing_stop', 
            order_info.get('ordType') == 'trailing_stop',
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            'trailing' in str(order_info).lower(),
            'callback' in str(order_info).lower() and order_info.get('triggerType') == 'mark_price',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è Bitget API
            order_info.get('force') == 'gtc' and 'trailing' in str(order_info).lower(),
            order_info.get('planCategory') == 'tpsl' and 'callback' in str(order_info).lower()
        ]
        
        return any(trailing_indicators)
    
    async def close_trailing_stop(self, symbol: str, order_id: str = None) -> Dict[str, Any]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –ø–æ —Å–∏–º–≤–æ–ª—É –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ID
        
        Args:
            symbol (str): –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            order_id (str, optional): ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        try:
            print(f"\n{'='*60}")
            print(f"üéØ –ó–ê–ö–†–´–¢–ò–ï –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü–û–í –î–õ–Ø {symbol}")
            print(f"{'='*60}")
            
            result = {
                'symbol': symbol,
                'timestamp': datetime.now().isoformat(),
                'closed_orders': [],
                'errors': []
            }
            
            formatted_symbol = self._format_symbol(symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            try:
                orders_params = {
                    'instType': 'swap',
                    'marginCoin': 'USDT'
                }
                orders = await self.exchange.fetch_open_orders(symbol=formatted_symbol, params=orders_params)
                trailing_stops = [order for order in orders if self._is_trailing_stop(order)]
                
                if not trailing_stops:
                    print("‚ùå –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return result
                
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(trailing_stops)} —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤")
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
                if order_id:
                    trailing_stops = [order for order in trailing_stops if order['id'] == order_id]
                    if not trailing_stops:
                        error_msg = f"–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        print(f"‚ùå {error_msg}")
                        result['errors'].append(error_msg)
                        return result
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
                for order in trailing_stops:
                    try:
                        print(f"\nüóëÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:")
                        print(f"   ID: {order['id']}")
                        print(f"   –°–∏–º–≤–æ–ª: {order['symbol']}")
                        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order['side']}")
                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['amount']}")
                        
                        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        cancel_params = {
                            'instType': 'swap',
                            'marginCoin': 'USDT'
                        }
                        cancel_result = await self.exchange.cancel_order(order['id'], formatted_symbol, params=cancel_params)
                        
                        result['closed_orders'].append({
                            'order_id': order['id'],
                            'symbol': order['symbol'],
                            'side': order['side'],
                            'amount': order['amount'],
                            'cancel_result': cancel_result,
                            'status': 'success'
                        })
                        
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                        
                    except Exception as order_error:
                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞ {order['id']}: {order_error}"
                        print(f"   ‚ùå {error_msg}")
                        result['errors'].append(error_msg)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                success_count = len(result['closed_orders'])
                error_count = len(result['errors'])
                
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ö–†–´–¢–ò–Ø:")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: {success_count}")
                print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
                
            except Exception as fetch_error:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {fetch_error}"
                print(f"‚ùå {error_msg}")
                result['errors'].append(error_msg)
            
            return result
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤: {e}"
            print(f"‚ùå {error_msg}")
            return {'error': error_msg, 'symbol': symbol}
    
    async def close_all_trailing_stops(self) -> Dict[str, Any]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º —Å–∏–º–≤–æ–ª–∞–º
        
        Returns:
            Dict: –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        print(f"\n{'='*60}")
        print("üö® –ú–ê–°–°–û–í–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü–û–í")
        print(f"{'='*60}")
        
        total_result = {
            'timestamp': datetime.now().isoformat(),
            'symbols_processed': [],
            'total_closed': 0,
            'total_errors': 0
        }
        
        for symbol in self.test_symbols:
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞: {symbol}")
            symbol_result = await self.close_trailing_stop(symbol)
            
            total_result['symbols_processed'].append(symbol_result)
            total_result['total_closed'] += len(symbol_result.get('closed_orders', []))
            total_result['total_errors'] += len(symbol_result.get('errors', []))
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            await asyncio.sleep(0.5)
        
        print(f"\n{'='*60}")
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.test_symbols)}")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ: {total_result['total_closed']}")
        print(f"   ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_result['total_errors']}")
        print(f"{'='*60}")
        
        return total_result
    
    async def debug_order_structure(self, symbol: str) -> None:
        """
        –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            print(f"\n{'='*60}")
            print(f"üî¨ –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –û–†–î–ï–†–û–í –î–õ–Ø {symbol}")
            print(f"{'='*60}")
            
            formatted_symbol = self._format_symbol(symbol)
            
            orders_params = {
                'instType': 'swap',
                'marginCoin': 'USDT'
            }
            orders = await self.exchange.fetch_open_orders(symbol=formatted_symbol, params=orders_params)
            
            if not orders:
                print("‚ùå –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
                return
            
            for i, order in enumerate(orders, 1):
                print(f"\nüîç –û–†–î–ï–† #{i}:")
                print(f"   ID: {order.get('id')}")
                print(f"   Type: {order.get('type')}")
                print(f"   Side: {order.get('side')}")
                print(f"   Amount: {order.get('amount')}")
                print(f"   Price: {order.get('price')}")
                print(f"   Status: {order.get('status')}")
                
                # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ info
                info = order.get('info', {})
                print(f"\n   üìÑ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ 'info':")
                for key, value in info.items():
                    print(f"      {key}: {value}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
                is_trailing = self._is_trailing_stop(order)
                print(f"\n   üéØ –Ø–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º: {'–î–ê' if is_trailing else '–ù–ï–¢'}")
                
                print("-" * 50)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤: {e}")

    async def get_balance_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ USDT –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Å—á–µ—Ç–µ
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
        """
        try:
            print(f"\n{'='*60}")
            print("üí∞ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–õ–ê–ù–°–ï")
            print(f"{'='*60}")
            
            balance_params = {
                'instType': 'swap',
                'marginCoin': 'USDT'
            }
            balance = await self.exchange.fetch_balance(balance_params)
            
            usdt_balance = balance['total'].get('USDT', 0)
            usdt_free = balance['free'].get('USDT', 0)
            usdt_used = balance['used'].get('USDT', 0)
            
            print(f"üìä –ë–∞–ª–∞–Ω—Å USDT:")
            print(f"   ‚Ä¢ –û–±—â–∏–π: {usdt_balance:.4f} USDT")
            print(f"   ‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π: {usdt_free:.4f} USDT")
            print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π: {usdt_used:.4f} USDT")
            
            return {
                'total': usdt_balance,
                'free': usdt_free,
                'used': usdt_used,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {'error': str(e)}
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–¨–Æ–ß–ï–†–°–û–í BITGET")
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéØ –°–∏–º–≤–æ–ª—ã: {', '.join(self.test_symbols)}")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            await self.get_balance_info()
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            for symbol in self.test_symbols:
                await self.check_positions_and_orders(symbol)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
            print(f"\n{'='*60}")
            print("üéÆ –î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            print("1. –ó–∞–∫—Ä—ã—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø—ã –¥–ª—è BTC")
            print("2. –ó–∞–∫—Ä—ã—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø—ã –¥–ª—è ETH") 
            print("3. –ó–∞–∫—Ä—ã—Ç—å –í–°–ï —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø—ã")
            print("4. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞")
            print("5. –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å")
            print("6. üî¨ –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤ BTC")
            print("7. üî¨ –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤ ETH")
            print("8. –í—ã—Ö–æ–¥")
            print(f"{'='*60}")
            
            while True:
                choice = input("\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ").strip()
                
                if choice == '1':
                    await self.close_trailing_stop('BTC/USDT')
                elif choice == '2':
                    await self.close_trailing_stop('ETH/USDT')
                elif choice == '3':
                    await self.close_all_trailing_stops()
                elif choice == '4':
                    for symbol in self.test_symbols:
                        await self.check_positions_and_orders(symbol)
                        await asyncio.sleep(0.5)
                elif choice == '5':
                    await self.get_balance_info()
                elif choice == '6':
                    await self.debug_order_structure('BTC/USDT')
                elif choice == '7':
                    await self.debug_order_structure('ETH/USDT')
                elif choice == '8':
                    print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                await asyncio.sleep(0.5)
                
        except KeyboardInterrupt:
            print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await self.exchange.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π –∑–∞–∫—Ä—ã—Ç–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–¨–Æ–ß–ï–†–°–ù–´–• –û–ü–ï–†–ê–¶–ò–ô BITGET")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['API_KEY', 'SECRET_KEY', 'PASSPHRASE']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç:")
        print("   API_KEY=your_api_key")
        print("   SECRET_KEY=your_secret_key") 
        print("   PASSPHRASE=your_passphrase")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    try:
        tester = BitgetFuturesTest()
        await tester.run_comprehensive_test()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc() 