"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º.
"""
import os
import asyncio
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hitalic, hcode, hpre

from bot_logging import logger
from trading.trader import Trader
from strategies.scanner import StrategyScanner
from utils.time_utils import get_all_supported_timeframes


class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram."""
    
    def __init__(self, trader: Trader, scanner: StrategyScanner):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞.
        
        Args:
            trader: –û–±—ä–µ–∫—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞
            scanner: –û–±—ä–µ–∫—Ç —Å–∫–∞–Ω–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ")
            
        self.bot = Bot(token=self.token)
        self.dp = Dispatcher()
        self.trader = trader
        self.scanner = scanner
        self.target_chat_id = int(os.getenv("TARGET_CHAT_ID", 0))
        
        # –õ–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._message_lock = asyncio.Lock()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.scanner.register_signal_callback(self._handle_signal)
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Telegram –±–æ—Ç. –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {self.target_chat_id}")
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self._cmd_start, Command("start"))
        self.dp.message.register(self._cmd_balance, Command("balance"))
        self.dp.message.register(self._cmd_stop, Command("stop"))
        self.dp.message.register(self._cmd_orders, Command("orders"))
        self.dp.message.register(self._cmd_leverage, Command("leverage"))
        self.dp.message.register(self._cmd_set_chat, Command("set_chat"))
        self.dp.message.register(self._cmd_get_id, Command("get_id"))
        self.dp.message.register(self._cmd_strategies, Command("strategies"))
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self._cmd_timeframe, Command("timeframe"))
        self.dp.message.register(self._cmd_scan, Command("scan"))
        self.dp.message.register(self._cmd_report, Command("report"))
        
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
        await self.dp.start_polling(self.bot)
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞")
        await self.bot.session.close()
    
    async def _handle_signal(self, signal: Dict) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
        
        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–≥–Ω–∞–ª–µ
        """
        if not self.target_chat_id:
            logger.warning("–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–∏–≥–Ω–∞–ª –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
            symbol = signal["symbol"]
            signal_type = "üü¢ –õ–û–ù–ì" if signal["type"] == "buy" else "üî¥ –®–û–†–¢"
            price = signal["price"]
            stop_loss = signal["stop_loss"]
            trail_points = signal.get("trail_points", 0)
            trail_offset = signal.get("trail_offset", 0)
            strategy_name = signal.get("strategy_name", "Unknown")
            timeframe = signal.get("timeframe", "Unknown")
            
            message = f"""üö® –°–ò–ì–ù–ê–õ –æ—Ç {strategy_name}: {signal_type} –Ω–∞ {symbol}!
üí∞ –¶–µ–Ω–∞: {price:.4f} USDT
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.4f} USDT
üîÑ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ {trail_points:.4f} –ø—É–Ω–∫—Ç–æ–≤ –≤ –ø—Ä–∏–±—ã–ª–∏, —à–∞–≥ {trail_offset:.4f}
‚è± –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîç –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(self.target_chat_id, message)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
            trade_result = await self.trader.open_trade(signal)
            await self.bot.send_message(self.target_chat_id, trade_result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
    
    async def _cmd_start(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π Bitget!

–ö–æ–º–∞–Ω–¥—ã:
- üí∞ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (/balance)
- üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ 
     –æ—Ç–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ (/stop)
- üî• –ü–æ–º–µ–Ω—è—Ç—å –ø–ª–µ—á–æ (/leverage <—á–∏—Å–ª–æ>)
- ‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ 
     –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ (/orders)
- üÜî –£–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞ (/get_id)
- üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ —Ü–µ–ª–µ–≤–æ–π (/set_chat)
- üìä –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (/strategies)
- ‚è± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º (/timeframe <—Å–∏–º–≤–æ–ª> <—Ç–∞–π–º—Ñ—Ä–µ–π–º>)
- üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (/scan <—Å–∏–º–≤–æ–ª>)
- üìù –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–æ—Ä–≥–æ–≤–ª–µ (/report)
"""
        await message.answer(welcome_text)
    
    async def _cmd_balance(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        try:
            async with self._message_lock:
                balance = await self.trader.exchange.get_usdt_balance()
                await message.reply(f"üí∞ –ë–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–æ–≤: {balance:.2f} USDT")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
    
    async def _cmd_stop(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        try:
            async with self._message_lock:
                result = await self.trader.close_all_trades()
                
                canceled_orders = result.get("closed_orders", 0)
                closed_positions = result.get("closed_positions", 0)
                error = result.get("error", None)
                
                if error:
                    await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–æ–∫: {error}", parse_mode="Markdown")
                else:
                    result_message = (
                        f"‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /stop:*\n\n"
                        f"üìã *–û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤:* {canceled_orders}\n"
                        f"üìä *–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π:* {closed_positions}\n\n"
                        f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.\n"
                        f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
                    )
                    await message.reply(result_message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stop: {str(e)}")
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stop: {str(e)}", parse_mode="Markdown")
    
    async def _cmd_orders(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders"""
        try:
            async with self._message_lock:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                open_orders = await self.trader.get_open_orders()
        
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–∞—Ö
                orders_info = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:*\n\n"
                if open_orders:
                    for order in open_orders:
                        orders_info += (
                            f"üîπ *–°–∏–º–≤–æ–ª:* {order['symbol']}-{order['side']}\n"
                            f"   *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {'üü¢ –õ–æ–Ω–≥' if order['side'] == 'buy' else 'üî¥ –®–æ—Ä—Ç'}\n"
                            f"   *–¢–∏–ø –æ—Ä–¥–µ—Ä–∞:* {order['type'].capitalize()}\n"
                            f"   *–¶–µ–Ω–∞:* {order['price']:.4f}\n"
                            f"   *–û–±—ä–µ–º:* {order['amount']:.4f}\n"
                            f"   *–ò—Å–ø–æ–ª–Ω–µ–Ω–æ:* {order['filled']:.4f}\n"
                            f"   *–û—Å—Ç–∞–ª–æ—Å—å:* {order['remaining']:.4f}\n\n"
                        )
                else:
                    orders_info += "‚ùå *–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç.*\n\n"
        
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                positions = await self.trader.get_active_positions()
                positions_info = "üìä *–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
                if positions:
                    for position in positions:
                        if float(position['contracts']) > 0:
                            symbol = position['symbol']
                            side = 'üü¢ –õ–æ–Ω–≥' if position['side'] == 'long' else 'üî¥ –®–æ—Ä—Ç'
                            pnl = float(position['unrealizedPnl'])
                            pnl_emoji = "üìà" if pnl >= 0 else "üìâ"
        
                            positions_info += (
                                f"üîπ *–°–∏–º–≤–æ–ª:* {symbol}\n"
                                f"   *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {side}\n"
                                f"   *–û–±—ä–µ–º:* {position['contracts']:.4f}\n"
                                f"   *–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {position['entryPrice']:.4f}\n"
                                f"   *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* {position['markPrice']:.4f}\n"
                                f"   *PNL:* {pnl_emoji} {pnl:.4f} USDT\n\n"
                            )
                else:
                    positions_info += "‚ùå *–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.*\n\n"
        
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–∞—Ö –∏ –ø–æ–∑–∏—Ü–∏—è—Ö
                final_message = orders_info + positions_info
        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply(final_message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _cmd_leverage(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leverage"""
        try:
            text = message.text
            args = text.split()
            
            if len(args) != 2:
                await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /leverage <—á–∏—Å–ª–æ>")
                return
                
            try:
                new_leverage = int(args[1])
                
                if 1 <= new_leverage <= 100:
                    success = await self.trader.set_leverage(new_leverage)
                    if success:
                        await message.answer(f"‚úÖ –ü–ª–µ—á–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_leverage}")
                    else:
                        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ—á–æ")
                else:
                    await message.answer("‚ö†Ô∏è –ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100.")
            except ValueError:
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /leverage.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–µ—á–∞: {str(e)}")
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _cmd_set_chat(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_chat"""
        self.target_chat_id = message.chat.id
        await message.answer(f"‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—å. ID: {self.target_chat_id}")
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç: {self.target_chat_id}")
    
    async def _cmd_get_id(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_id"""
        chat_id = message.chat.id
        await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{chat_id}</code>", parse_mode="HTML")
    
    async def _cmd_strategies(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategies"""
        strategies_info = self.scanner.get_strategies_info()
        
        if not strategies_info:
            await message.reply("üìä *–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*", parse_mode="Markdown")
            return
            
        response = "üìà *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n\n"
        
        for info in strategies_info:
            active_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if info["active"] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            response += (
                f"üî∏ *–°–∏–º–≤–æ–ª:* {info['symbol']}\n"
                f"   *–°—Ç—Ä–∞—Ç–µ–≥–∏—è:* {info['name']}\n"
                f"   *–¢–∞–π–º—Ñ—Ä–µ–π–º:* {info['timeframe']}\n"
                f"   *–°—Ç–∞—Ç—É—Å:* {active_status}\n\n"
            )
            
        await message.reply(response, parse_mode="Markdown")
    
    async def _cmd_timeframe(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timeframe"""
        text = message.text
        args = text.split()
        
        if len(args) != 3:
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            timeframes = get_all_supported_timeframes()
            tf_str = "\n".join([f"  ‚Ä¢ {tf} - {desc}" for tf, desc in timeframes.items()])
            
            await message.answer(
                f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /timeframe <—Å–∏–º–≤–æ–ª> <—Ç–∞–π–º—Ñ—Ä–µ–π–º>\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:\n{tf_str}"
            )
            return
            
        symbol = args[1].upper()
        if not symbol.endswith("/USDT"):
            symbol = f"{symbol}/USDT"
            
        timeframe = args[2].lower()
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
        success = self.scanner.set_timeframe(symbol, timeframe)
        
        if success:
            await message.answer(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è {symbol} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timeframe}")
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è {symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")
    
    async def _cmd_scan(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan"""
        text = message.text
        args = text.split()
        
        if len(args) != 2:
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /scan <—Å–∏–º–≤–æ–ª>")
            return
            
        symbol = args[1].upper()
        if not symbol.endswith("/USDT"):
            symbol = f"{symbol}/USDT"
            
        await message.answer(f"üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {symbol}...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        signal = await self.scanner.scan_symbol(symbol)
        
        if signal:
            await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal['type']} –ø–æ —Ü–µ–Ω–µ {signal['price']:.4f}")
        else:
            await message.answer(f"‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    async def _cmd_report(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
        await message.answer("üìä TODO: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ...")
        # –í –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ 